version: '3.8'

services:
  redis:
    image: docker.io/library/redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Podman specific options
    security_opt:
      - label=disable

  postgres:
    image: docker.io/library/postgres:15-alpine
    environment:
      POSTGRES_DB: queue_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d queue_system"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Podman specific options
    security_opt:
      - label=disable

  api:
    build: .
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: queue_system
      DB_USER: postgres
      DB_PASSWORD: password
      PORT: 3000
      LOG_LEVEL: info
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:Z
    command: ["node", "dist/index.js"]
    restart: unless-stopped
    # Podman specific options
    security_opt:
      - label=disable

  worker:
    build: .
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: queue_system
      DB_USER: postgres
      DB_PASSWORD: password
      LOG_LEVEL: info
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:Z
    command: ["node", "dist/worker.js"]
    restart: unless-stopped
    # Podman specific options
    security_opt:
      - label=disable
    scale: 2

  monitor:
    build: .
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: queue_system
      DB_USER: postgres
      DB_PASSWORD: password
      LOG_LEVEL: info
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:Z
    command: ["node", "dist/monitor.js"]
    restart: unless-stopped
    profiles:
      - monitor
    # Podman specific options
    security_opt:
      - label=disable

  producer:
    build: .
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: queue_system
      DB_USER: postgres
      DB_PASSWORD: password
      LOG_LEVEL: info
      PRODUCER_INTERVAL: 5000
      PRODUCER_MAX_TASKS: 100
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:Z
    command: ["node", "dist/producer.js"]
    restart: unless-stopped
    profiles:
      - demo
    # Podman specific options
    security_opt:
      - label=disable

volumes:
  redis_data:
  postgres_data: